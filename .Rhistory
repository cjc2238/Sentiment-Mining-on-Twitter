require(ggplot2)
require(dplyr)
require(tidyr)
require(lubridate)
?searchTwitteR
############################
# Authenticate Twitter API
###########################
source('~/GitHub/Searching Twitter Authentication.R', echo=TRUE)
setup_twitter_oauth(Consumer_Key, Consumer_Secret, Access_Token, Access_Secret)
setwd("~/GitHub/Sentiment Mining on Twitter")
#########################
# Pull and load the data
#########################
hrc <- searchTwitteR('Hillary Clinton'+'President', resultType = "popular", n=1000)
hrc <- searchTwitteR('Hillary Clinton + President', resultType = "popular", n=1000)
hrc <- searchTwitteR('Hillary Clinton + President', resultType = "mixed", n=1000)
hrc <- hrc[, order(names(hrc))]
hrc <- twListToDF(hrc)
hrc <- hrc[, order(names(hrc))]
hrc$created <- strftime(hrc$created, '%Y-%m-%d')
hrc$created <- as.POSIXct(hrc$created, tz = "EST")
hrc$day = as.numeric(format(hrc$created, format = "%d"))
#####################
# Process the corpus
#####################
D1 <- Corpus(VectorSource(hrc$text))
D2 <- sapply(D1,function(row) iconv(row, "latin1", "ASCII", sub=""))
## Remove Websites
D3 <- gsub("(f|ht)tp(s?)://(.*)[.][a-z]+@", "", D2)
## Remove spammed values by only selecting unique tweets
D5 <- Corpus(VectorSource(D3))
#########################
## Clean the corpus data
#########################
## Remove puncuation
D6 <- tm_map(D5, removePunctuation)
## Convert all characters to lower case
D6 <- tm_map(D5, content_transformer(tolower))
## Remove all stop words ("and" "the" "etc").
D6 <- tm_map(D5, removeWords, stopwords("english"))
## Remove numbers
D6 <- tm_map(D5, removeNumbers)
## Remove all the white space
D6 <- tm_map(D5, stripWhitespace)
## Convert corpus to a term document matrix - so each word can be analyzed individuallly
tdm.corpus <- TermDocumentMatrix(D6)
##########################
# generate the word cloud
##########################
hrc_cloud <- wordcloud(D6, max.words = 100, random.order = F, col= rainbow(20), scale = c(6, .5))
###################################################################
# Match words in corpus to lexicons of positive and negative words
###################################################################
## Upload positive and negative word lexicons
positive <- readLines("positive-words.txt")
negative <- readLines("negative-words.txt")
## Search for matches between each word and the two lexicons
hrc$positive <- tm_term_score(tdm.corpus, positive)
hrc$negative <- tm_term_score(tdm.corpus, negative)
hrc$score <- hrc$positive - hrc$negative
#########################################
# Generate graph for sentiment over time
#########################################
## Create data frame to graph
hrc2 <- hrc %>% group_by(created) %>% summarise(mean(score))
names(hrc2) <- c("Date", "Score")
hrc3 <- hrc %>% group_by(created) %>% summarise(mean(positive))
names(hrc3) <- c("Date", "Positive")
hrc4 <- hrc %>% group_by(created) %>% summarise(mean(negative))
names(hrc4) <- c("Date","Negative")
djt <- searchTwitteR('Donald Trump'+'President', resultType = "popular", n=1000)
djt <- twListToDF(djt)
djt <- searchTwitteR('Donald Trump + President', resultType = "popular", n=1000)
djt <- searchTwitteR('Donald Trump + President', resultType = "mixed", n=1000)
djt <- twListToDF(djt)
djt <- djt[, order(names(djt))]
djt$created <- strftime(djt$created, '%Y-%m-%d')
djt$created <- as.POSIXct(djt$created, tz = "EST")
djt$day = as.numeric(format(djt$created, format = "%d"))
#####################
# Process the corpus
#####################
D1 <- Corpus(VectorSource(djt$text))
D2 <- sapply(D1,function(row) iconv(row, "latin1", "ASCII", sub=""))
## Remove Websites
D3 <- gsub("(f|ht)tp(s?)://(.*)[.][a-z]+@", "", D2)
## Remove spammed values by only selecting unique tweets
D5 <- Corpus(VectorSource(D3))
#########################
## Clean the corpus data
#########################
## Remove puncuation
D6 <- tm_map(D5, removePunctuation)
## Convert all characters to lower case
D6 <- tm_map(D5, content_transformer(tolower))
## Remove all stop words ("and" "the" "etc").
D6 <- tm_map(D5, removeWords, stopwords("english"))
## Remove numbers
D6 <- tm_map(D5, removeNumbers)
## Remove all the white space
D6 <- tm_map(D5, stripWhitespace)
## Convert corpus to a term document matrix - so each word can be analyzed individuallly
tdm.corpus <- TermDocumentMatrix(D6)
##########################
# generate the word cloud
##########################
djt_cloud <- wordcloud(D6, max.words = 100, random.order = F, col= rainbow(20), scale = c(6, .5))
###################################################################
# Match words in corpus to lexicons of positive and negative words
###################################################################
## Upload positive and negative word lexicons
positive <- readLines("positive-words.txt")
negative <- readLines("negative-words.txt")
## Search for matches between each word and the two lexicons
djt$positive <- tm_term_score(tdm.corpus, positive)
djt$negative <- tm_term_score(tdm.corpus, negative)
djt$score <- djt$positive - djt$negative
#########################################
# Generate graph for sentiment over time
#########################################
## Create data frame to graph
djt2 <- djt %>% group_by(created) %>% summarise(mean(score))
names(djt2) <- c("Date", "Score")
djt3 <- djt %>% group_by(created) %>% summarise(mean(positive))
names(djt3) <- c("Date", "Positive")
djt4 <- djt %>% group_by(created) %>% summarise(mean(negative))
names(djt4) <- c("Date","Negative")
View(djt4)
View(hrc4)
View(hrc2)
View(hrc3)
View(hrc4)
View(hrc)
plot(hrc$score)
plot(sum(hrc$score)
plot(mean(hrc$score)
ggplot(hrc, aes(score)) +
geom_density()
djt2 <- summarise(mean(score))
djt2 <- summarise(mean(djt$score))
ggplot(hrc, aes(score)) +
geom_density(adjust=1/5)
ggplot(hrc, aes(score)) +
geom_density(adjust=5)
ggplot(hrc, aes(score)) +
geom_density(adjust=1/2)
ggplot(hrc, aes(score)) +
geom_density(adjust=1/4)
ggplot(hrc, aes(score)) +
geom_density()
ggplot(djt, aes(score)) +
geom_density()
ggplot(hrc, aes(score)) +
geom_density() + ggplot(djt, aes(score)) +
+     geom_density()
djt5 <- subset(djt, select = c("score","positive","negative"))
, lines = rep(c("score", "positive","negative)
ggplot(djt, aes(x = sentiment, fill = c("score","positive","negative")) + geom_density(alpha = 0.5)
djt5 <- subset(djt, select = c("score","positive","negative")), lines = (c("score", "positive","negative)
djt5 <- subset(djt, select = c("score","positive","negative"), lines = (c("score", "positive","negative))
djt5 <- subset(djt, select = c("score","positive","negative")
djt5 <- subset(djt, select = c("score","positive","negative"))
View(djt5)
hrc5 <- subset(hrc, select = c("score","positive","negative"))
plot(density(djt5$score))
lines(density(djt5$positive))
lines(density(djt5$negative))
ggplot(hrc, aes(score)) + geom_density()
ggplot(hrc, aes(score)) + geom_density()
ggplot(djt, aes(score)) + geom_density()
ggplot(hrc, aes(score)) + geom_density()
ggplot(djt, aes(score)) + geom_density()
ggplot(djt, aes(score)) + geom_hist()
ggplot(djt, aes(score)) + geom_histogram()
ggplot(djt, aes(score)) + geom_bar()
ggplot(djt, aes(score)) + geom_density()
ggplot(djt, aes(score)) + geom_density() + geom_histogram()
ggplot(djt, aes(score)) + geom_density()
p <- ggplot(djt, aes(score)) + geom_density()
p+ geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score)) + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
+               color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score)) + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
+               color="blue", linetype="dashed", size=1)
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score),color="blue") + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score),color="red") + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score, color="red")) + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score, color="red", size = 2)) + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score, color="red", size = .5)) + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score, color="red", size = .5)) + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score, color="red", size = 1)) + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score, color="red", size = 1)) + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score, color="red")) + geom_density()
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score)) + geom_density(color="red")
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score)) + geom_density(color="red", size = .5)
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score)) + geom_density(color="red", size = 1)
p_djt + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_hrc <- ggplot(hrc5, aes(score)) + geom_density(color="red", size = 1)
p_hrc + geom_vline(aes(xintercept=mean(score)),
color="blue", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score)) + geom_density(color="red", size = 1)
p_djt + geom_vline(aes(xintercept=mean(score)),
color="green", linetype="dashed", size=1)
p_hrc <- ggplot(hrc5, aes(score)) + geom_density(color="blue", size = 1)
p_hrc + geom_vline(aes(xintercept=mean(score)),
color="green", linetype="dashed", size=1)
p_hrc <- ggplot(hrc5, aes(score)) + geom_density(color="blue", size = 1)
p_hrc + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score)) + geom_density(color="red", size = 1)
p_djt + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1)
p_hrc <- ggplot(hrc5, aes(score)) + geom_density(color="blue", size = 1)
p_hrc + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score)) + geom_density(color="red", size = 1)
p_djt + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1)
p_hrc <- ggplot(hrc5, aes(score)) + geom_density(color="blue", size = 1)
p_hrc + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1)
p_djt + p_hrc
p_hrc <- ggplot(hrc5, aes(score)) + geom_density(color="blue", size = 1)
p_hrc + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1) + labs(title="Clinton Sentiment Density Curve",x="Sentiment", y = "Density")
p_djt <- ggplot(djt5, aes(score)) + geom_density(color="red", size = 1)
p_djt + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1) + labs(title="Trump Sentiment Density Curve",x="Sentiment Score", y = "Density")
p_hrc <- ggplot(hrc5, aes(score)) + geom_density(color="blue", size = 1)
p_hrc + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1) + labs(title="Clinton Sentiment Density Curve",x="Sentiment Score", y = "Density")
p_hrc + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1) + labs(title="Clinton Sentiment Density Curve",x="Sentiment Score", y = "Density", size = 2)
p_hrc + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1) + labs(title="Clinton Sentiment Density Curve",x="Sentiment Score", y = "Density", size = 10)
p_djt
p_djt + geom_line(data = hrc5, aes(score), solor="blue")
p_djt + geom_line(data = hrc5, aes(score), solor="blue") + geom_density()
p_djt + geom_line(data = hrc5, aes(score), color="blue") + geom_density()
p_djt + geom_density(data = hrc5, aes(score), color="blue")
p_djt <- ggplot(djt5, aes(score)) + geom_density(color="red", size = 1)
p_djt + geom_density(data = hrc5, aes(score), color="blue", size = 1)
p_djt + geom_vline(aes(xintercept=mean(score)),
color="dark green", linetype="dashed", size=1)
p_djt <- ggplot(djt5, aes(score)) + geom_density(color="red", size = 1)
p_djt + geom_density(data = hrc5, aes(score), color="blue", size = 1)
p_both <- p_djt + geom_density(data = hrc5, aes(score), color="blue", size = 1)
p_both + geom_vline(aes(xintercept=mean(hrc5$score)),
color="blue", linetype="dashed", size=1)
p_both + geom_vline(aes(xintercept=mean(hrc5$score)),
color="blue", linetype="dashed", size=3)
p_both + geom_vline(aes(xintercept=mean(hrc5$score)),
color="blue", linetype="dashed", size=2)
p_both + geom_vline(aes(xintercept=mean(hrc5$score)),
color="blue", linetype="dashed", size=.5)
p_both + geom_vline(aes(xintercept=mean(hrc5$score)),
color="blue", linetype="dashed", size=.8)
p_both <- p_both + geom_vline(aes(xintercept=mean(djt5$score)),
color="blue", linetype="dashed", size=.8)
p_both <- p_both + geom_vline(aes(xintercept=mean(hrc5$score)),
color="blue", linetype="dashed", size=.8)
p_both <- p_both + geom_vline(aes(xintercept=mean(djt5$score)),
color="red", linetype="dashed", size=.8)
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1)
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1)
p_both <- p_both + geom_vline(aes(xintercept=mean(hrc$score)),
color="blue", linetype="dashed", size=.8)
p_both2 <- p_both + geom_vline(aes(xintercept=mean(djt$score)),
color="red", linetype="dashed", size=.8)
mean(hrc$score)
mu <- as.data.frame(c(mean(hrc$score),mean(djt$score)))
View(mu)
names(mu) <- "mean"
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1)
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1)
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1)
p_both <- p_both + geom_vline(data = mu, aes(mean
color="blue", linetype="dashed", size=.8)
p_both <- p_both + geom_vline(data = mu, aes(mean)
color="blue", linetype="dashed", size=.8)
p_both <- p_both + geom_vline(data = mu, aes(x=mean),
color="blue", linetype="dashed", size=.8)
p_both
p_both <- p_both + geom_vline(data = mu, aes(xintercept==mean),
color="blue", linetype="dashed", size=.8)
p_both
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1)
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1)
p_both + geom_vline(data = mu, aes(xintercept==mean),
color="blue", linetype="dashed", size=.8)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color="blue", linetype="dashed", size=.8)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8)
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1, fill = l="light red")
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1, fill = "light red")
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8)
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1, fill = "red")
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8)
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1, fill = "#999999")
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8)
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1, fill = "#E69F00")
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8)
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1, fill = "#56B4E9")
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8)
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1, fill = "#FF6666")
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1, fill = "#56B4E9")
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8)
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1, fill = "#FF6666", alpha = .5)
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1, fill = "#56B4E9")
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8)
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1, fill = "#FF6666", alpha = .5)
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1, fill = "#56B4E9", alpha = .5)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users",x="Sentiment Score", y = "Density")
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates",x="Sentiment Score", y = "Density")
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates (Density Plot)",x="Sentiment Score", y = "Density")
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates (Density Plot)",x="Sentiment Score", y = "Density")
p_djt <- ggplot(djt, aes(score, color = "Trump")) + geom_density(color="red", size = 1, fill = "#FF6666", alpha = .5)
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1, fill = "#56B4E9", alpha = .5)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates",x="Sentiment Score", y = "Density")
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates",x="Sentiment Score", y = "Density") + legend('topright', names(c("Trump","Clinton")), lty = 1, col = c("red","blue"))
p_both
p_both + lwd=c(2.5,2.5),col=c(“blue”,”red”))
p_both + lwd=c(2.5,2.5), col=c(“blue”,”red”))
p_both + lwd=c(2.5,2.5) col=c(“blue”,”red”))
p_both + lwd=c(2.5,2.5),col=c(“blue”,”red”)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates",x="Sentiment Score", y = "Density") + legend('topright', legend= names(c("Trump","Clinton")), lty = 1, col = c("red","blue"))
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates",x="Sentiment Score", y = "Density") + legend('topright', legend= names(c("Trump","Clinton"))
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates",x="Sentiment Score", y = "Density") + legend('topright', legend= score)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates",x="Sentiment Score", y = "Density") + legend('topright', legend= "score")
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates",x="Sentiment Score", y = "Density") + legend('topright', legend= c(hrc$score, djt$score))
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates",x="Sentiment Score", y = "Density")
source('~/GitHub/Sentiment Mining on Twitter/Compare both by day.R', echo=TRUE)
djt <- searchTwitteR('Donald Trump + President', resultType = "mixed", n=5000)
djt <- twListToDF(djt)
djt <- djt[, order(names(djt))]
djt$created <- strftime(djt$created, '%Y-%m-%d')
djt$created <- as.POSIXct(djt$created, tz = "EST")
djt$day = as.numeric(format(djt$created, format = "%d"))
#####################
# Process the corpus
#####################
D1 <- Corpus(VectorSource(djt$text))
D2 <- sapply(D1,function(row) iconv(row, "latin1", "ASCII", sub=""))
## Remove Websites
D3 <- gsub("(f|ht)tp(s?)://(.*)[.][a-z]+@", "", D2)
## Remove spammed values by only selecting unique tweets
D5 <- Corpus(VectorSource(D3))
#########################
## Clean the corpus data
#########################
## Remove puncuation
D6 <- tm_map(D5, removePunctuation)
## Convert all characters to lower case
D6 <- tm_map(D5, content_transformer(tolower))
## Remove all stop words ("and" "the" "etc").
D6 <- tm_map(D5, removeWords, stopwords("english"))
## Remove numbers
D6 <- tm_map(D5, removeNumbers)
## Remove all the white space
D6 <- tm_map(D5, stripWhitespace)
## Convert corpus to a term document matrix - so each word can be analyzed individuallly
tdm.corpus <- TermDocumentMatrix(D6)
###################################################################
# Match words in corpus to lexicons of positive and negative words
###################################################################
## Upload positive and negative word lexicons
positive <- readLines("positive-words.txt")
negative <- readLines("negative-words.txt")
## Search for matches between each word and the two lexicons
djt$positive <- tm_term_score(tdm.corpus, positive)
djt$negative <- tm_term_score(tdm.corpus, negative)
djt$score <- djt$positive - djt$negative
#########################################
# Generate density plot for sentiment
#########################################
mu <- as.data.frame(c(mean(hrc$score),mean(djt$score)))
names(mu) <- "mean"
p_djt <- ggplot(djt, aes(score)) + geom_density(color="red", size = 1, fill = "#FF6666", alpha = .5)
p_both <- p_djt + geom_density(data = hrc, aes(score), color="blue", size = 1, fill = "#56B4E9", alpha = .5)
p_both + geom_vline(data = mu, aes(xintercept=mean),
color=c("blue","red"), linetype="dashed", size=.8) + labs(title="Sentiment of Twitter Users Regarding Presidential Candidates",x="Sentiment Score", y = "Density")
source('~/GitHub/Sentiment Mining on Twitter/HRC Twitter.R', echo=TRUE)
source('~/GitHub/Sentiment Mining on Twitter/HRC Twitter.R', echo=TRUE)
source('~/GitHub/Sentiment Mining on Twitter/Compare Plots.R', echo=TRUE)
both_plot <- ggplot() +
geom_line(aes(Date, Score), color="blue", size = 2, hrc2) +
geom_line(aes(Date, Score), color="red", size = 2, djt2) + labs(title = "Mean Sentiment Score of
Clinton/Trump Related Tweets")
grid.arrange(both_plot, hrc_plot, djt_plot, ncol=1)
both_plot <- ggplot() +
geom_line(aes(Date, Score), color="blue", size = 2, hrc2, label = clinton) +
geom_line(aes(Date, Score), color="red", size = 2, djt2) + labs(title = "Mean Sentiment Score of
Clinton/Trump Related Tweets")
both_plot <- ggplot() +
geom_line(aes(Date, Score), color="blue", size = 2, hrc2, name = "clinton") +
geom_line(aes(Date, Score), color="red", size = 2, djt2) + labs(title = "Mean Sentiment Score of
Clinton/Trump Related Tweets")
both_plot <- ggplot() +
geom_line(aes(Date, Score), color="blue", size = 2, hrc2, label = "clinton") +
geom_line(aes(Date, Score), color="red", size = 2, djt2) + labs(title = "Mean Sentiment Score of
Clinton/Trump Related Tweets")
both_plot <- ggplot() +
geom_line(aes(Date, Score), color="blue", size = 2, hrc2, legend = "clinton") +
geom_line(aes(Date, Score), color="red", size = 2, djt2) + labs(title = "Mean Sentiment Score of
Clinton/Trump Related Tweets")
both_plot <- ggplot() +
geom_line(aes(Date, Score), color="blue", size = 2, hrc2, title = "clinton") +
geom_line(aes(Date, Score), color="red", size = 2, djt2) + labs(title = "Mean Sentiment Score of
Clinton/Trump Related Tweets")
both_plot <- ggplot() +
geom_line(aes(Date, Score), color="blue", size = 2, hrc2, labs(title = "clinton")) +
geom_line(aes(Date, Score), color="red", size = 2, djt2) + labs(title = "Mean Sentiment Score of
Clinton/Trump Related Tweets")
djt_plot <- ggplot() +
geom_line(aes(Date, Positive), colour="black", size = 2, djt3) +
geom_line(aes(Date, Negative), colour="red", size = 2, djt4) + labs(title = "Sentiment of Donald Related Trump Tweets")
hrc_plot <- ggplot() +
geom_line(aes(Date, Positive), colour="black", size = 2, hrc3) +
geom_line(aes(Date, Negative), colour="red", size = 2, hrc4) + labs(title = "Sentiment of Hilary Related Clinton Tweets")
both_plot <- ggplot() +
geom_line(aes(Date, Score), color="blue", size = 2, hrc2) +
geom_line(aes(Date, Score), color="red", size = 2, djt2) + labs(title = "Mean Sentiment Score of
Clinton/Trump Related Tweets")
grid.arrange(both_plot, hrc_plot, djt_plot, ncol=1)
both_plot <- ggplot() +
geom_density(aes(Date, Score), color="blue", size = 2, hrc2) +
geom_density(aes(Date, Score), color="red", size = 2, djt2) + labs(title = "Mean Sentiment Score of
Clinton/Trump Related Tweets")
grid.arrange(both_plot, hrc_plot, djt_plot, ncol=1)
both_plot <- ggplot() +
geom_line(aes(Date, Score), color="blue", size = 2, hrc2) +
geom_line(aes(Date, Score), color="red", size = 2, djt2) + labs(title = "Mean Sentiment Score of
Clinton/Trump Related Tweets")
grid.arrange(both_plot, hrc_plot, djt_plot, ncol=1)
geom_line(aes(Date, Score), color="blue", size = 2, hrc2)
ggplot() + geom_line(aes(Date, Score), color="blue", size = 2, hrc2)
ggplot() + geom_boxplot(aes(Date, Score), color="blue", size = 2, hrc2)
ggplot() + geom_line(aes(Date, Score), color="blue", size = 2, hrc2)
+ geom_line(aes(Date, Score), color="red", size = 2, djt2)
geom_line(aes(Date, Score), color="blue", size = 2, hrc2) +
geom_line(aes(Date, Score), color="red", size = 2, djt2)
ggplot() + geom_line(aes(Date, Score), color="blue", size = 2, hrc2) + geom_line(aes(Date, Score), color="red", size = 2, djt2)
View(hrc)
fit <- lm(created~score, data=hrc)
plot(fit)
fit <- lm(day~score, data=hrc)
plot(fit)
plot(fit)
plot(hrc), lines(hrc$eruptions, fitted(fit), col="blue")
plot(hrc), lines(hrc$score, fitted(fit), col="blue")
plot(hrc)lines(hrc$score, fitted(fit), col="blue")
plot(hrc)
lines(hrc$score, fitted(fit), col="blue")
plot(hrc$score)
lines(hrc$score, fitted(fit), col="blue")
barplot(hrc$score)
hist(hrc$score)
hist(djt$score)
